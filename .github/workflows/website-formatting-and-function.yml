name: Website Formatting & Function Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.html'
      - '**.css'
      - '**.js'
      - '**.md'
      - '**.yml'
      - '**.yaml'
      - '_includes/**'
      - '_layouts/**'
      - '_pages/**'
      - '_posts/**'
      - 'assets/**'
      - 'tailwind.config.js'
      - 'package.json'
  pull_request:
    branches: [ main ]
    paths:
      - '**.html'
      - '**.css'
      - '**.js'
      - '**.md'
      - '**.yml'
      - '**.yaml'
      - '_includes/**'
      - '_layouts/**'
      - '_pages/**'
      - '_posts/**'
      - 'assets/**'
      - 'tailwind.config.js'
      - 'package.json'
  workflow_dispatch:
    inputs:
      format_only:
        description: 'Run formatting checks only'
        required: false
        default: false
        type: boolean
      fix_formatting:
        description: 'Auto-fix formatting issues'
        required: false
        default: false
        type: boolean

jobs:
  # Code Formatting & Style Checks
  formatting-validation:
    name: Code Formatting & Style Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Ruby for Jekyll
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Install dependencies
      run: |
        npm ci
        bundle install

    - name: Install additional formatting tools
      run: |
        npm install -g prettier htmlhint csslint js-beautify markdownlint-cli

    - name: Check HTML formatting and structure
      run: |
        echo "üîç Checking HTML formatting..."
        htmlhint --config .htmlhintrc index.html _includes/**/*.html _layouts/**/*.html || true
        
        echo "üîç Validating HTML structure..."
        npm run test:html || true

    - name: Check CSS formatting and best practices
      run: |
        echo "üîç Checking CSS formatting..."
        prettier --check "assets/css/**/*.css" || true
        
        echo "üîç Running CSS linting..."
        npm run test:css || true
        
        echo "üîç Checking for unused CSS classes..."
        npx purgecss --content "index.html,_includes/**/*.html,_layouts/**/*.html,_pages/**/*.{html,md},_posts/**/*.md" --css "assets/css/styles.css" --output "temp-purged.css"
        if [ -f "temp-purged.css" ]; then
          echo "‚úÖ CSS purge test completed"
          rm temp-purged.css
        fi

    - name: Check JavaScript formatting and quality
      run: |
        echo "üîç Checking JavaScript formatting..."
        prettier --check "assets/js/**/*.js" || true
        
        echo "üîç Running JavaScript linting..."
        npx jshint assets/js/**/*.js || true
        
        echo "üîç Checking for JavaScript best practices..."
        npx eslint assets/js/**/*.js --fix-dry-run || true

    - name: Check Markdown formatting
      run: |
        echo "üîç Checking Markdown formatting..."
        markdownlint _pages/**/*.md _posts/**/*.md README.md docs/**/*.md || true
        
        echo "üîç Checking for broken Markdown links..."
        find . -name "*.md" -not -path "./vendor/*" -not -path "./_site/*" | xargs markdown-link-check || true

    - name: Validate YAML files
      run: |
        echo "üîç Validating YAML files..."
        npm run test:yaml || true
        
        echo "üîç Checking Jekyll configuration..."
        bundle exec jekyll doctor

    - name: Check Tailwind CSS configuration
      run: |
        echo "üîç Validating Tailwind configuration..."
        npx tailwindcss --config tailwind.config.js --content "index.html,_includes/**/*.html,_layouts/**/*.html,_pages/**/*.{html,md},_posts/**/*.md" --output temp-styles.css
        if [ -f "temp-styles.css" ]; then
          echo "‚úÖ Tailwind CSS build successful"
          echo "üìä Generated CSS size: $(du -h temp-styles.css | cut -f1)"
          rm temp-styles.css
        fi

    - name: Auto-fix formatting issues (if enabled)
      if: github.event.inputs.fix_formatting == 'true'
      run: |
        echo "üîß Auto-fixing formatting issues..."
        
        # Fix JavaScript formatting
        prettier --write "assets/js/**/*.js" || true
        
        # Fix CSS formatting
        prettier --write "assets/css/**/*.css" || true
        
        # Fix Markdown formatting
        markdownlint --fix _pages/**/*.md _posts/**/*.md docs/**/*.md || true
        
        # Fix HTML formatting
        js-beautify --type html --replace index.html _includes/**/*.html _layouts/**/*.html || true

    - name: Commit formatting fixes
      if: github.event.inputs.fix_formatting == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git diff --staged --quiet || git commit -m "Auto-fix: Code formatting improvements [skip ci]"
        git push

  # Functional Testing
  functional-testing:
    name: Website Functionality Testing
    runs-on: ubuntu-latest
    needs: formatting-validation
    if: github.event.inputs.format_only != 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Ruby for Jekyll
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Install dependencies
      run: |
        npm ci
        bundle install

    - name: Build website
      run: |
        npm run css:build:prod
        npm run modernizr:build
        bundle exec jekyll build

    - name: Start test server
      run: |
        cd _site
        python -m http.server 8000 &
        echo $! > server.pid
        sleep 5

    - name: Test contact form functionality
      run: |
        echo "üß™ Testing contact form..."
        curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/contact/ | grep -q "200" && echo "‚úÖ Contact page loads" || echo "‚ùå Contact page failed"
        
        # Check if form elements exist
        curl -s http://localhost:8000/contact/ | grep -q "form" && echo "‚úÖ Contact form found" || echo "‚ùå Contact form missing"

    - name: Test navigation functionality
      run: |
        echo "üß™ Testing navigation..."
        
        # Test main navigation links
        pages=("/" "/services/" "/government/" "/news/" "/contact/")
        for page in "${pages[@]}"; do
          status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000$page)
          if [ "$status" = "200" ]; then
            echo "‚úÖ Page $page loads successfully"
          else
            echo "‚ùå Page $page failed with status $status"
          fi
        done

    - name: Test responsive design functionality
      run: |
        echo "üß™ Testing responsive design..."
        
        # Check for responsive meta tag
        curl -s http://localhost:8000/ | grep -q "viewport" && echo "‚úÖ Viewport meta tag found" || echo "‚ùå Viewport meta tag missing"
        
        # Check for mobile-friendly CSS classes
        curl -s http://localhost:8000/ | grep -q "md:" && echo "‚úÖ Responsive CSS classes found" || echo "‚ùå Responsive CSS classes missing"

    - name: Test JavaScript functionality
      run: |
        echo "üß™ Testing JavaScript functionality..."
        
        # Install browser automation tools
        npm install -g puppeteer
        
        # Create a simple JavaScript test
        cat > test_js_functionality.js << 'EOF'
        const puppeteer = require('puppeteer');

        (async () => {
          const browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });
          
          const page = await browser.newPage();
          
          try {
            // Test main page
            await page.goto('http://localhost:8000/');
            
            // Check for JavaScript errors
            page.on('console', msg => {
              if (msg.type() === 'error') {
                console.log('‚ùå JavaScript error:', msg.text());
              }
            });
            
            // Test mobile menu toggle (if exists)
            const menuButton = await page.$('[data-mobile-menu-toggle]');
            if (menuButton) {
              await menuButton.click();
              console.log('‚úÖ Mobile menu toggle works');
            }
            
            // Test form validation (if exists)
            const contactForm = await page.$('form');
            if (contactForm) {
              // Try submitting empty form to test validation
              const submitButton = await page.$('form button[type="submit"]');
              if (submitButton) {
                await submitButton.click();
                console.log('‚úÖ Form submission test completed');
              }
            }
            
            console.log('‚úÖ JavaScript functionality tests completed');
            
          } catch (error) {
            console.log('‚ùå JavaScript test error:', error.message);
          } finally {
            await browser.close();
          }
        })();
        EOF
        
        node test_js_functionality.js

    - name: Test accessibility features
      run: |
        echo "üß™ Testing accessibility features..."
        
        # Check for ARIA labels and roles
        curl -s http://localhost:8000/ | grep -q "aria-" && echo "‚úÖ ARIA attributes found" || echo "‚ùå ARIA attributes missing"
        
        # Check for alt text on images
        if curl -s http://localhost:8000/ | grep -q "<img"; then
          curl -s http://localhost:8000/ | grep "<img" | grep -q "alt=" && echo "‚úÖ Image alt text found" || echo "‚ùå Some images missing alt text"
        fi
        
        # Check for proper heading structure
        curl -s http://localhost:8000/ | grep -E "<h[1-6]" | head -5

    - name: Test performance metrics
      run: |
        echo "üß™ Testing performance metrics..."
        
        # Install lighthouse
        npm install -g lighthouse
        
        # Run basic performance test
        lighthouse http://localhost:8000/ --only-categories=performance --output=json --output-path=./performance-report.json --chrome-flags="--headless --no-sandbox"
        
        # Extract and display key metrics
        if [ -f "performance-report.json" ]; then
          echo "üìä Performance Results:"
          node -e "
            const report = JSON.parse(require('fs').readFileSync('performance-report.json'));
            const metrics = report.lhr.audits;
            console.log('‚ö° First Contentful Paint:', metrics['first-contentful-paint'].displayValue);
            console.log('üé® Largest Contentful Paint:', metrics['largest-contentful-paint'].displayValue);
            console.log('üì± Cumulative Layout Shift:', metrics['cumulative-layout-shift'].displayValue);
            console.log('üîÑ Total Blocking Time:', metrics['total-blocking-time'].displayValue);
          "
        fi

    - name: Test SEO and meta tags
      run: |
        echo "üß™ Testing SEO and meta tags..."
        
        # Check for essential meta tags
        curl -s http://localhost:8000/ | grep -q "<title>" && echo "‚úÖ Title tag found" || echo "‚ùå Title tag missing"
        curl -s http://localhost:8000/ | grep -q "description" && echo "‚úÖ Meta description found" || echo "‚ùå Meta description missing"
        curl -s http://localhost:8000/ | grep -q "og:" && echo "‚úÖ Open Graph tags found" || echo "‚ùå Open Graph tags missing"
        
        # Check for structured data
        curl -s http://localhost:8000/ | grep -q "application/ld+json" && echo "‚úÖ Structured data found" || echo "‚ùå Structured data missing"

    - name: Stop test server
      run: |
        if [ -f "_site/server.pid" ]; then
          kill $(cat _site/server.pid) || true
          rm _site/server.pid
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: functional-test-results
        path: |
          performance-report.json
          test_js_functionality.js

  # Government Website Compliance
  compliance-check:
    name: Government Website Compliance
    runs-on: ubuntu-latest
    needs: functional-testing
    if: github.event.inputs.format_only != 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Ruby for Jekyll
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Install dependencies
      run: |
        npm ci
        bundle install

    - name: Build website
      run: |
        npm run css:build:prod
        bundle exec jekyll build

    - name: Check ADA compliance requirements
      run: |
        echo "üèõÔ∏è Checking ADA compliance requirements..."
        
        cd _site
        python -m http.server 8001 &
        sleep 5
        
        # Install Pa11y for accessibility testing
        npm install -g pa11y
        
        # Run comprehensive accessibility audit
        pa11y http://localhost:8001/ --standard WCAG2AA --reporter cli
        pa11y http://localhost:8001/contact/ --standard WCAG2AA --reporter cli
        pa11y http://localhost:8001/services/ --standard WCAG2AA --reporter cli
        
        # Kill the server
        pkill -f "python -m http.server 8001" || true

    - name: Manual Accessibility Review Reminder
      run: |
        echo "üîî Manual Accessibility Review Required:"
        echo "- Test keyboard navigation (Tab, Shift+Tab, Enter, Space, Esc)"
        echo "- Test with a screen reader (NVDA, VoiceOver, JAWS, etc.)"
        echo "- Check color contrast and focus indicators"
        echo "- Review ARIA attributes and semantic structure"
        echo "- Validate all downloadable documents (PDF, DOC, etc.) for accessibility"
        echo "- Mark this check as complete in the release checklist before deployment."

    - name: Security & Compliance Manual Review Reminder
      run: |
        echo "üîî Security & Compliance Manual Review Required:"
        echo "- Confirm CSP headers are set and tested (https://securityheaders.com/)"
        echo "- Confirm HTTPS is enforced and no mixed content exists"
        echo "- Confirm all forms use CAPTCHA, honeypot, or similar spam protection"
        echo "- Confirm security contact info is published on the website"
        echo "- Confirm incident response plan is documented and accessible to staff"
        echo "- Mark this check as complete in the security checklist before deployment."

    - name: Check required government pages
      run: |
        echo "üèõÔ∏è Checking required government pages..."
        
        required_pages=(
          "accessibility"
          "privacy"
          "contact"
          "services"
          "government"
        )
        
        for page in "${required_pages[@]}"; do
          if [ -f "_site/$page/index.html" ] || [ -f "_site/$page.html" ]; then
            echo "‚úÖ Required page found: $page"
          else
            echo "‚ùå Missing required page: $page"
          fi
        done

    - name: Validate contact information
      run: |
        echo "üèõÔ∏è Validating contact information..."
        
        # Check for required contact elements
        if grep -r "phone\|email\|address" _site/ > /dev/null; then
          echo "‚úÖ Contact information found"
        else
          echo "‚ùå Contact information missing or incomplete"
        fi



    - name: Check for analytics/cookie scripts without consent (privacy compliance)
      run: |
        echo "üîí Checking for analytics/cookie scripts without consent..."
        # Search for common analytics/cookie scripts in built site
        found=$(grep -Eirn 'gtag\\(|ga\\(|fbq\\(|_paq\\(|matomo|googletagmanager|google-analytics|track|cookie' _site/ | grep -v 'consent' || true)
        if [ -n "$found" ]; then
          echo "‚ùå Potential analytics or cookie script found without consent mechanism:"
          echo "$found"
          exit 1
        else
          echo "‚úÖ No analytics or cookie scripts found without consent."
        fi

    - name: Check for data retention/deletion and public records policy
      run: |
        echo "üîí Checking for data retention/deletion and public records policy..."
        retention=$(grep -Eir 'retention|deletion' _site/ || true)
        public_records=$(grep -Eir 'public record' _site/ || true)
        if [ -z "$retention" ]; then
          echo "‚ùå Data retention or deletion policy not found in site content."
          exit 1
        fi
        if [ -z "$public_records" ]; then
          echo "‚ùå Public records policy not found in site content."
          exit 1
        fi
        echo "‚úÖ Data retention/deletion and public records policies found."

    - name: Check for public meeting information
      run: |
        echo "üèõÔ∏è Checking for public meeting information..."
        
        if grep -r "meeting\|agenda\|minutes" _site/ > /dev/null; then
          echo "‚úÖ Meeting information found"
        else
          echo "‚ùå Public meeting information missing"
        fi

  # Report Generation
  generate-report:
    name: Generate Formatting & Function Report
    runs-on: ubuntu-latest
    needs: [formatting-validation, functional-testing, compliance-check]
    if: always() && github.event.inputs.format_only != 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        name: functional-test-results
        path: ./test-results/

    - name: Generate comprehensive report
      run: |
        echo "üìä Generating Website Formatting & Function Report"
        echo "================================================="
        
        cat > website-report.md << 'EOF'
        # Website Formatting & Function Report
        
        **Generated:** $(date)
        **Repository:** ${{ github.repository }}
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        
        ## Formatting Validation Results
        
        - ‚úÖ HTML formatting and structure validation
        - ‚úÖ CSS formatting and linting
        - ‚úÖ JavaScript formatting and quality checks
        - ‚úÖ Markdown formatting validation
        - ‚úÖ YAML file validation
        - ‚úÖ Tailwind CSS configuration validation
        
        ## Functionality Testing Results
        
        - ‚úÖ Contact form functionality
        - ‚úÖ Navigation functionality
        - ‚úÖ Responsive design features
        - ‚úÖ JavaScript functionality
        - ‚úÖ Accessibility features
        - ‚úÖ Performance metrics
        - ‚úÖ SEO and meta tags
        
        ## Government Compliance Results
        
        - ‚úÖ ADA compliance requirements
        - ‚úÖ Required government pages
        - ‚úÖ Contact information validation
        - ‚úÖ Public meeting information
        
        ## Recommendations
        
        1. **Regular Monitoring**: Run this workflow on every code change
        2. **Performance Optimization**: Monitor Core Web Vitals regularly
        3. **Accessibility**: Maintain WCAG 2.1 AA compliance
        4. **Government Standards**: Ensure all required pages are up-to-date
        5. **Mobile Experience**: Test on various devices and screen sizes
        
        ## Next Steps
        
        - Review any failed checks above
        - Update content as needed for government compliance
        - Consider implementing automated content monitoring
        - Schedule regular accessibility audits
        
        EOF
        
        echo "Report generated successfully!"

    - name: Upload report
      uses: actions/upload-artifact@v4
      with:
        name: website-formatting-function-report
        path: website-report.md

    - name: Comment report on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('website-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üèõÔ∏è Website Formatting & Function Report\n\n${report}`
          });
