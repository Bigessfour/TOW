name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create GitHub Release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate release notes from CHANGELOG.md
        if [ -f CHANGELOG.md ]; then
          # Extract the section for this version from CHANGELOG.md
          sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | head -n -1 > release_notes.md
        else
          echo "Release $VERSION" > release_notes.md
        fi
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.release_notes.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        
    - name: Create deployment archive
      run: |
        # Create a clean deployment package
        mkdir -p deployment
        cp index.html styles.css script.js deployment/
        cp README.md CHANGELOG.md LICENSE deployment/
        cp -r .github/copilot-instructions.md deployment/.github/ 2>/dev/null || true
        
        # Create archive
        tar -czf deployment-${{ steps.release_notes.outputs.version }}.tar.gz -C deployment .
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./deployment-${{ steps.release_notes.outputs.version }}.tar.gz
        asset_name: town-of-wiley-${{ steps.release_notes.outputs.version }}.tar.gz
        asset_content_type: application/gzip
